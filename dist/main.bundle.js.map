{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://gpu001/./node_modules/gl-matrix/esm/common.js","webpack://gpu001/./node_modules/gl-matrix/esm/mat2.js","webpack://gpu001/./node_modules/gl-matrix/esm/mat2d.js","webpack://gpu001/./node_modules/gl-matrix/esm/mat3.js","webpack://gpu001/./node_modules/gl-matrix/esm/mat4.js","webpack://gpu001/./node_modules/gl-matrix/esm/vec3.js","webpack://gpu001/./node_modules/gl-matrix/esm/vec4.js","webpack://gpu001/./node_modules/gl-matrix/esm/quat.js","webpack://gpu001/./node_modules/gl-matrix/esm/quat2.js","webpack://gpu001/./node_modules/gl-matrix/esm/vec2.js","webpack://gpu001/./src/hairHelper.ts","webpack://gpu001/./src/hairSimScene.ts","webpack://gpu001/./src/helper.ts","webpack://gpu001/./src/objLoader.ts","webpack://gpu001/./src/shaders.ts","webpack://gpu001/./src/smath.ts","webpack://gpu001/./src/vertex_data.ts","webpack://gpu001/webpack/bootstrap","webpack://gpu001/webpack/runtime/define property getters","webpack://gpu001/webpack/runtime/hasOwnProperty shorthand","webpack://gpu001/webpack/runtime/make namespace object","webpack://gpu001/./src/main.ts"],"sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\r\n\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\nvar degree = Math.PI / 180;\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\n\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}\r\nif (!Math.hypot) Math.hypot = function () {\r\n  var y = 0,\r\n      i = arguments.length;\r\n\r\n  while (i--) {\r\n    y += arguments[i] * arguments[i];\r\n  }\r\n\r\n  return Math.sqrt(y);\r\n};","import * as glMatrix from \"./common.js\";\r\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\n\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\r\n\r\nexport function fromValues(m00, m01, m10, m11) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function set(out, m00, m01, m10, m11) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache\r\n  // some values\r\n  if (out === a) {\r\n    var a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3]; // Calculate the determinant\r\n\r\n  var det = a0 * a3 - a2 * a1;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] = a0 * det;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  var a0 = a[0];\r\n  out[0] = a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a0;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\n\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\n\r\nexport function scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\n\r\nexport function str(a) {\r\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\n\r\nexport function frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3]);\r\n}\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\r\n\r\nexport function LDU(L, D, U, a) {\r\n  L[2] = a[2] / a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\r\n\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\r\n\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n  }\r\n\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\n\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\r\n\r\nexport function fromValues(a, b, c, d, tx, ty) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function set(out, a, b, c, d, tx, ty) {\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function invert(out, a) {\r\n  var aa = a[0],\r\n      ab = a[1],\r\n      ac = a[2],\r\n      ad = a[3];\r\n  var atx = a[4],\r\n      aty = a[5];\r\n  var det = aa * ad - ab * ac;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = ad * det;\r\n  out[1] = -ab * det;\r\n  out[2] = -ac * det;\r\n  out[3] = aa * det;\r\n  out[4] = (ac * aty - ad * atx) * det;\r\n  out[5] = (ab * atx - aa * aty) * det;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\n\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[1] * a[2];\r\n}\r\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  out[4] = a0 * b4 + a2 * b5 + a4;\r\n  out[5] = a1 * b4 + a3 * b5 + a5;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\r\n\r\nexport function scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\r\n\r\nexport function translate(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0;\r\n  out[1] = a1;\r\n  out[2] = a2;\r\n  out[3] = a3;\r\n  out[4] = a0 * v0 + a2 * v1 + a4;\r\n  out[5] = a1 * v0 + a3 * v1 + a5;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = v[0];\r\n  out[5] = v[1];\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\n\r\nexport function str(a) {\r\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\r\n}\r\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\n\r\nexport function frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\r\n}\r\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  return out;\r\n}\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\r\n\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\r\n}\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\r\n}\r\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\r\n\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\n\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\n\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\r\n\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\n\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n}\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\n\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\n\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n  return out;\r\n}\r\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\r\n\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  return out;\r\n}\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\n\r\nexport function str(a) {\r\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\r\n}\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\n\r\nexport function frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\r\n}\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\n\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\n\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\n\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\n\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\r\n\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\n\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\r\n\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15]; // Cache only the current line of the second matrix\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  b0 = b[4];\r\n  b1 = b[5];\r\n  b2 = b[6];\r\n  b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  b0 = b[8];\r\n  b1 = b[9];\r\n  b2 = b[10];\r\n  b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  b0 = b[12];\r\n  b1 = b[13];\r\n  b2 = b[14];\r\n  b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00, a01, a02, a03;\r\n  var a10, a11, a12, a13;\r\n  var a20, a21, a22, a23;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];\r\n    a01 = a[1];\r\n    a02 = a[2];\r\n    a03 = a[3];\r\n    a10 = a[4];\r\n    a11 = a[5];\r\n    a12 = a[6];\r\n    a13 = a[7];\r\n    a20 = a[8];\r\n    a21 = a[9];\r\n    a22 = a[10];\r\n    a23 = a[11];\r\n    out[0] = a00;\r\n    out[1] = a01;\r\n    out[2] = a02;\r\n    out[3] = a03;\r\n    out[4] = a10;\r\n    out[5] = a11;\r\n    out[6] = a12;\r\n    out[7] = a13;\r\n    out[8] = a20;\r\n    out[9] = a21;\r\n    out[10] = a22;\r\n    out[11] = a23;\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\n\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.hypot(x, y, z);\r\n  var s, c, t;\r\n  var a00, a01, a02, a03;\r\n  var a10, a11, a12, a13;\r\n  var a20, a21, a22, a23;\r\n  var b00, b01, b02;\r\n  var b10, b11, b12;\r\n  var b20, b21, b22;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n  a00 = a[0];\r\n  a01 = a[1];\r\n  a02 = a[2];\r\n  a03 = a[3];\r\n  a10 = a[4];\r\n  a11 = a[5];\r\n  a12 = a[6];\r\n  a13 = a[7];\r\n  a20 = a[8];\r\n  a21 = a[9];\r\n  a22 = a[10];\r\n  a23 = a[11]; // Construct the elements of the rotation matrix\r\n\r\n  b00 = x * x * t + c;\r\n  b01 = y * x * t + z * s;\r\n  b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;\r\n  b11 = y * y * t + c;\r\n  b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;\r\n  b21 = y * z * t - x * s;\r\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\r\n\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  } // Perform axis-specific matrix multiplication\r\n\r\n\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  } // Perform axis-specific matrix multiplication\r\n\r\n\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  } // Perform axis-specific matrix multiplication\r\n\r\n\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.hypot(x, y, z);\r\n  var s, c, t;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c; // Perform rotation-specific matrix multiplication\r\n\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\r\n\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\r\n\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\n\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\r\n\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\n\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n  return out;\r\n}\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\n\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n  out[0] = Math.hypot(m11, m12, m13);\r\n  out[1] = Math.hypot(m21, m22, m23);\r\n  out[2] = Math.hypot(m31, m32, m33);\r\n  return out;\r\n}\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\n\r\nexport function getRotation(out, mat) {\r\n  var scaling = new glMatrix.ARRAY_TYPE(3);\r\n  getScaling(scaling, mat);\r\n  var is1 = 1 / scaling[0];\r\n  var is2 = 1 / scaling[1];\r\n  var is3 = 1 / scaling[2];\r\n  var sm11 = mat[0] * is1;\r\n  var sm12 = mat[1] * is2;\r\n  var sm13 = mat[2] * is3;\r\n  var sm21 = mat[4] * is1;\r\n  var sm22 = mat[5] * is2;\r\n  var sm23 = mat[6] * is3;\r\n  var sm31 = mat[8] * is1;\r\n  var sm32 = mat[9] * is2;\r\n  var sm33 = mat[10] * is3;\r\n  var trace = sm11 + sm22 + sm33;\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (sm23 - sm32) / S;\r\n    out[1] = (sm31 - sm13) / S;\r\n    out[2] = (sm12 - sm21) / S;\r\n  } else if (sm11 > sm22 && sm11 > sm33) {\r\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\r\n    out[3] = (sm23 - sm32) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (sm12 + sm21) / S;\r\n    out[2] = (sm31 + sm13) / S;\r\n  } else if (sm22 > sm33) {\r\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\r\n    out[3] = (sm31 - sm13) / S;\r\n    out[0] = (sm12 + sm21) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (sm23 + sm32) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\r\n    out[3] = (sm12 - sm21) / S;\r\n    out[0] = (sm31 + sm13) / S;\r\n    out[1] = (sm23 + sm32) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n * which matches WebGL/OpenGL's clip volume.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function perspectiveNO(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Alias for {@link mat4.perspectiveNO}\r\n * @function\r\n */\r\n\r\nexport var perspective = perspectiveNO;\r\n/**\r\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\r\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function perspectiveZO(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = far * nf;\r\n    out[14] = far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -near;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n * which matches WebGL/OpenGL's clip volume.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function orthoNO(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Alias for {@link mat4.orthoNO}\r\n * @function\r\n */\r\n\r\nexport var ortho = orthoNO;\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\r\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function orthoZO(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = near * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n  len = 1 / Math.hypot(z0, z1, z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.hypot(x0, x1, x2);\r\n\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n  len = Math.hypot(y0, y1, y2);\r\n\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\n\r\nexport function str(a) {\r\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\r\n}\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\n\r\nexport function frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\r\n}\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\n\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\n\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.hypot(x, y, z);\r\n}\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.hypot(x, y, z);\r\n}\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n\r\n  out[0] = a[0] * len;\r\n  out[1] = a[1] * len;\r\n  out[2] = a[2] * len;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n  return out;\r\n}\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n  return out;\r\n}\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2]; // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\r\n\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\r\n\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\r\n\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function rotateX(out, a, b, rad) {\r\n  var p = [],\r\n      r = []; //Translate point to the origin\r\n\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2]; //perform rotation\r\n\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\r\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\r\n\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function rotateY(out, a, b, rad) {\r\n  var p = [],\r\n      r = []; //Translate point to the origin\r\n\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2]; //perform rotation\r\n\r\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\r\n\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function rotateZ(out, a, b, rad) {\r\n  var p = [],\r\n      r = []; //Translate point to the origin\r\n\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2]; //perform rotation\r\n\r\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\r\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\r\n  r[2] = p[2]; //translate to correct position\r\n\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\n\r\nexport function angle(a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\r\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\r\n      mag = mag1 * mag2,\r\n      cosine = mag && dot(a, b) / mag;\r\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n}\r\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\nexport function str(a) {\r\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\n\r\nexport var sub = subtract;\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\n\r\nexport var div = divide;\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\n\r\nexport var dist = distance;\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\n\r\nexport var sqrDist = squaredDistance;\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\n\r\nexport var len = length;\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\n\r\nexport var sqrLen = squaredLength;\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\nexport var forEach = function () {\r\n  var vec = create();\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i, l;\r\n\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n      a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\n\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\n\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.hypot(x, y, z, w);\r\n}\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.hypot(x, y, z, w);\r\n}\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n\r\n  out[0] = x * len;\r\n  out[1] = y * len;\r\n  out[2] = z * len;\r\n  out[3] = w * len;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\r\n\r\nexport function cross(out, u, v, w) {\r\n  var A = v[0] * w[1] - v[1] * w[0],\r\n      B = v[0] * w[2] - v[2] * w[0],\r\n      C = v[0] * w[3] - v[3] * w[0],\r\n      D = v[1] * w[2] - v[2] * w[1],\r\n      E = v[1] * w[3] - v[3] * w[1],\r\n      F = v[2] * w[3] - v[3] * w[2];\r\n  var G = u[0];\r\n  var H = u[1];\r\n  var I = u[2];\r\n  var J = u[3];\r\n  out[0] = H * F - I * E + J * D;\r\n  out[1] = -(G * F) + I * C - J * B;\r\n  out[2] = G * E - H * C + J * A;\r\n  out[3] = -(G * D) + H * B - I * A;\r\n  return out;\r\n}\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3]; // calculate quat * vec\r\n\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\r\n\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\r\n\r\nexport function zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\nexport function str(a) {\r\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\n\r\nexport var sub = subtract;\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\n\r\nexport var div = divide;\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\n\r\nexport var dist = distance;\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\n\r\nexport var sqrDist = squaredDistance;\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\n\r\nexport var len = length;\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\n\r\nexport var sqrLen = squaredLength;\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\nexport var forEach = function () {\r\n  var vec = create();\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i, l;\r\n\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      vec[2] = a[i + 2];\r\n      vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n      a[i + 2] = vec[2];\r\n      a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\n\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\n\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\n\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n\r\n  return rad;\r\n}\r\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\r\n\r\nexport function getAngle(a, b) {\r\n  var dotproduct = dot(a, b);\r\n  return Math.acos(2 * dotproduct * dotproduct - 1);\r\n}\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\n\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\n\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\n\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\n\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\r\n\r\nexport function exp(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  var r = Math.sqrt(x * x + y * y + z * z);\r\n  var et = Math.exp(w);\r\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\r\n  out[0] = x * s;\r\n  out[1] = y * s;\r\n  out[2] = z * s;\r\n  out[3] = et * Math.cos(r);\r\n  return out;\r\n}\r\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\r\n\r\nexport function ln(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  var r = Math.sqrt(x * x + y * y + z * z);\r\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\r\n  out[0] = x * t;\r\n  out[1] = y * t;\r\n  out[2] = z * t;\r\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\r\n  return out;\r\n}\r\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\r\n\r\nexport function pow(out, a, b) {\r\n  ln(out, a);\r\n  scale(out, out, b);\r\n  exp(out, out);\r\n  return out;\r\n}\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\n\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\r\n\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\r\n\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  } // calculate coefficients\r\n\r\n\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  } // calculate final values\r\n\r\n\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n  return out;\r\n}\r\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\n\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\n\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\n\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\nexport function str(a) {\r\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\n\r\nexport var clone = vec4.clone;\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\n\r\nexport var fromValues = vec4.fromValues;\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexport var copy = vec4.copy;\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexport var set = vec4.set;\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexport var add = vec4.add;\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexport var scale = vec4.scale;\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\n\r\nexport var dot = vec4.dot;\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexport var lerp = vec4.lerp;\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\nexport var length = vec4.length;\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\n\r\nexport var len = length;\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\n\r\nexport var squaredLength = vec4.squaredLength;\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\n\r\nexport var sqrLen = squaredLength;\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexport var normalize = vec4.normalize;\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport var exactEquals = vec4.exactEquals;\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport var equals = vec4.equals;\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\n\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\n\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n    return out;\r\n  };\r\n}();\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\n\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as quat from \"./quat.js\";\r\nimport * as mat4 from \"./mat4.js\";\r\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\r\n\r\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\r\n\r\nexport function create() {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    dq[0] = 0;\r\n    dq[1] = 0;\r\n    dq[2] = 0;\r\n    dq[4] = 0;\r\n    dq[5] = 0;\r\n    dq[6] = 0;\r\n    dq[7] = 0;\r\n  }\r\n\r\n  dq[3] = 1;\r\n  return dq;\r\n}\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\n\r\nexport function clone(a) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = a[0];\r\n  dq[1] = a[1];\r\n  dq[2] = a[2];\r\n  dq[3] = a[3];\r\n  dq[4] = a[4];\r\n  dq[5] = a[5];\r\n  dq[6] = a[6];\r\n  dq[7] = a[7];\r\n  return dq;\r\n}\r\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\n\r\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  dq[4] = x2;\r\n  dq[5] = y2;\r\n  dq[6] = z2;\r\n  dq[7] = w2;\r\n  return dq;\r\n}\r\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\n\r\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  var ax = x2 * 0.5,\r\n      ay = y2 * 0.5,\r\n      az = z2 * 0.5;\r\n  dq[4] = ax * w1 + ay * z1 - az * y1;\r\n  dq[5] = ay * w1 + az * x1 - ax * z1;\r\n  dq[6] = az * w1 + ax * y1 - ay * x1;\r\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\r\n  return dq;\r\n}\r\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\n\r\nexport function fromRotationTranslation(out, q, t) {\r\n  var ax = t[0] * 0.5,\r\n      ay = t[1] * 0.5,\r\n      az = t[2] * 0.5,\r\n      bx = q[0],\r\n      by = q[1],\r\n      bz = q[2],\r\n      bw = q[3];\r\n  out[0] = bx;\r\n  out[1] = by;\r\n  out[2] = bz;\r\n  out[3] = bw;\r\n  out[4] = ax * bw + ay * bz - az * by;\r\n  out[5] = ay * bw + az * bx - ax * bz;\r\n  out[6] = az * bw + ax * by - ay * bx;\r\n  out[7] = -ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\n\r\nexport function fromTranslation(out, t) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = t[0] * 0.5;\r\n  out[5] = t[1] * 0.5;\r\n  out[6] = t[2] * 0.5;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\n\r\nexport function fromRotation(out, q) {\r\n  out[0] = q[0];\r\n  out[1] = q[1];\r\n  out[2] = q[2];\r\n  out[3] = q[3];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\r\n\r\nexport function fromMat4(out, a) {\r\n  //TODO Optimize this\r\n  var outer = quat.create();\r\n  mat4.getRotation(outer, a);\r\n  var t = new glMatrix.ARRAY_TYPE(3);\r\n  mat4.getTranslation(t, a);\r\n  fromRotationTranslation(out, outer, t);\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  out[0] = x1;\r\n  out[1] = y1;\r\n  out[2] = z1;\r\n  out[3] = w1;\r\n  out[4] = x2;\r\n  out[5] = y2;\r\n  out[6] = z2;\r\n  out[7] = w2;\r\n  return out;\r\n}\r\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\r\n\r\nexport var getReal = quat.copy;\r\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\r\n\r\nexport function getDual(out, a) {\r\n  out[0] = a[4];\r\n  out[1] = a[5];\r\n  out[2] = a[6];\r\n  out[3] = a[7];\r\n  return out;\r\n}\r\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexport var setReal = quat.copy;\r\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexport function setDual(out, q) {\r\n  out[4] = q[0];\r\n  out[5] = q[1];\r\n  out[6] = q[2];\r\n  out[7] = q[3];\r\n  return out;\r\n}\r\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\r\n\r\nexport function getTranslation(out, a) {\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3];\r\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  return out;\r\n}\r\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function translate(out, a, v) {\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3],\r\n      bx1 = v[0] * 0.5,\r\n      by1 = v[1] * 0.5,\r\n      bz1 = v[2] * 0.5,\r\n      ax2 = a[4],\r\n      ay2 = a[5],\r\n      az2 = a[6],\r\n      aw2 = a[7];\r\n  out[0] = ax1;\r\n  out[1] = ay1;\r\n  out[2] = az1;\r\n  out[3] = aw1;\r\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\r\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\r\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\r\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function rotateX(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateX(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function rotateY(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateY(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function rotateZ(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateZ(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function rotateByQuatAppend(out, a, q) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  ax = a[4];\r\n  ay = a[5];\r\n  az = a[6];\r\n  aw = a[7];\r\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function rotateByQuatPrepend(out, q, a) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      bx = a[0],\r\n      by = a[1],\r\n      bz = a[2],\r\n      bw = a[3];\r\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  bx = a[4];\r\n  by = a[5];\r\n  bz = a[6];\r\n  bw = a[7];\r\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function rotateAroundAxis(out, a, axis, rad) {\r\n  //Special case for rad = 0\r\n  if (Math.abs(rad) < glMatrix.EPSILON) {\r\n    return copy(out, a);\r\n  }\r\n\r\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  var bx = s * axis[0] / axisLength;\r\n  var by = s * axis[1] / axisLength;\r\n  var bz = s * axis[2] / axisLength;\r\n  var bw = Math.cos(rad);\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3];\r\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  var ax0 = a[0],\r\n      ay0 = a[1],\r\n      az0 = a[2],\r\n      aw0 = a[3],\r\n      bx1 = b[4],\r\n      by1 = b[5],\r\n      bz1 = b[6],\r\n      bw1 = b[7],\r\n      ax1 = a[4],\r\n      ay1 = a[5],\r\n      az1 = a[6],\r\n      aw1 = a[7],\r\n      bx0 = b[0],\r\n      by0 = b[1],\r\n      bz0 = b[2],\r\n      bw0 = b[3];\r\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\r\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\r\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\r\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\r\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\r\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\r\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\r\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\r\n  return out;\r\n}\r\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\n\r\nexport var dot = quat.dot;\r\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function lerp(out, a, b, t) {\r\n  var mt = 1 - t;\r\n  if (dot(a, b) < 0) t = -t;\r\n  out[0] = a[0] * mt + b[0] * t;\r\n  out[1] = a[1] * mt + b[1] * t;\r\n  out[2] = a[2] * mt + b[2] * t;\r\n  out[3] = a[3] * mt + b[3] * t;\r\n  out[4] = a[4] * mt + b[4] * t;\r\n  out[5] = a[5] * mt + b[5] * t;\r\n  out[6] = a[6] * mt + b[6] * t;\r\n  out[7] = a[7] * mt + b[7] * t;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function invert(out, a) {\r\n  var sqlen = squaredLength(a);\r\n  out[0] = -a[0] / sqlen;\r\n  out[1] = -a[1] / sqlen;\r\n  out[2] = -a[2] / sqlen;\r\n  out[3] = a[3] / sqlen;\r\n  out[4] = -a[4] / sqlen;\r\n  out[5] = -a[5] / sqlen;\r\n  out[6] = -a[6] / sqlen;\r\n  out[7] = a[7] / sqlen;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\r\n\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  out[4] = -a[4];\r\n  out[5] = -a[5];\r\n  out[6] = -a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\r\n\r\nexport var length = quat.length;\r\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\r\n\r\nexport var len = length;\r\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\n\r\nexport var squaredLength = quat.squaredLength;\r\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\r\n\r\nexport var sqrLen = squaredLength;\r\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexport function normalize(out, a) {\r\n  var magnitude = squaredLength(a);\r\n\r\n  if (magnitude > 0) {\r\n    magnitude = Math.sqrt(magnitude);\r\n    var a0 = a[0] / magnitude;\r\n    var a1 = a[1] / magnitude;\r\n    var a2 = a[2] / magnitude;\r\n    var a3 = a[3] / magnitude;\r\n    var b0 = a[4];\r\n    var b1 = a[5];\r\n    var b2 = a[6];\r\n    var b3 = a[7];\r\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\r\n    out[0] = a0;\r\n    out[1] = a1;\r\n    out[2] = a2;\r\n    out[3] = a3;\r\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\r\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\r\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\r\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\r\n\r\nexport function str(a) {\r\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\r\n}\r\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\r\n}","import * as glMatrix from \"./common.js\";\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\n\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\n\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\n\r\nexport function fromValues(x, y) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n}\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n}\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n}\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n}\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n}\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return Math.hypot(x, y);\r\n}\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return x * x + y * y;\r\n}\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\nexport function length(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return Math.hypot(x, y);\r\n}\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\nexport function squaredLength(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return x * x + y * y;\r\n}\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n}\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n}\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function normalize(out, a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  var len = x * x + y * y;\r\n\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n\r\n  out[0] = a[0] * len;\r\n  out[1] = a[1] * len;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n}\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nexport function cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n      ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n}\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function transformMat2(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function rotate(out, a, b, rad) {\r\n  //Translate point to the origin\r\n  var p0 = a[0] - b[0],\r\n      p1 = a[1] - b[1],\r\n      sinC = Math.sin(rad),\r\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\r\n\r\n  out[0] = p0 * cosC - p1 * sinC + b[0];\r\n  out[1] = p0 * sinC + p1 * cosC + b[1];\r\n  return out;\r\n}\r\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\n\r\nexport function angle(a, b) {\r\n  var x1 = a[0],\r\n      y1 = a[1],\r\n      x2 = b[0],\r\n      y2 = b[1],\r\n      // mag is the product of the magnitudes of a and b\r\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\r\n      // mag &&.. short circuits if mag == 0\r\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\r\n\r\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n}\r\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\r\n\r\nexport function zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\nexport function str(a) {\r\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1];\r\n  var b0 = b[0],\r\n      b1 = b[1];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\r\n}\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\n\r\nexport var len = length;\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\n\r\nexport var sub = subtract;\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\n\r\nexport var mul = multiply;\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\n\r\nexport var div = divide;\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\n\r\nexport var dist = distance;\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\n\r\nexport var sqrDist = squaredDistance;\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\n\r\nexport var sqrLen = squaredLength;\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\nexport var forEach = function () {\r\n  var vec = create();\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i, l;\r\n\r\n    if (!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import { vec3 } from \"gl-matrix\";\r\n\r\nexport const createHairStrand = (startPos: vec3 = [0,0,0], \r\n    direction: vec3 = [0,0,0]) =>\r\n{\r\n    \r\n}\r\n\r\nexport const createInitialHairPoints = (\r\n    hairRootGeometryData: any,\r\n    numHairPoints: number, \r\n    numHairStrands: number) =>\r\n{\r\n    const numAllHairPoints = numHairPoints * numHairStrands;\r\n    const rootPositions = new Float32Array(numHairStrands * 4);\r\n    const hairPointPositions = new Float32Array(numAllHairPoints * 4);\r\n\r\n    const rootGeomVertices = hairRootGeometryData.vertexData;\r\n    const rootGeomIndices = hairRootGeometryData.indexData;\r\n    const vertStride = 3 * 2;\r\n\r\n    // Initial growth positions\r\n    for(let i = 0; i < numHairStrands; i++)\r\n    {\r\n        // Random first triangle vertex index\r\n        const randomIndex = \r\n            Math.floor(Math.random() * rootGeomIndices.length / 3);\r\n        const triIndex0 = rootGeomIndices[randomIndex * 3 + 0];\r\n        const triIndex1 = rootGeomIndices[randomIndex * 3 + 1];\r\n        const triIndex2 = rootGeomIndices[randomIndex * 3 + 2];\r\n\r\n        // 3 triangle vertices\r\n        const vertPos0 = vec3.fromValues(\r\n            rootGeomVertices[triIndex0 * vertStride + 0],\r\n            rootGeomVertices[triIndex0 * vertStride + 1],\r\n            rootGeomVertices[triIndex0 * vertStride + 2]\r\n        );\r\n        const vertPos1 = vec3.fromValues(\r\n            rootGeomVertices[triIndex1 * vertStride + 0],\r\n            rootGeomVertices[triIndex1 * vertStride + 1],\r\n            rootGeomVertices[triIndex1 * vertStride + 2]\r\n        );\r\n        const vertPos2 = vec3.fromValues(\r\n            rootGeomVertices[triIndex2 * vertStride + 0],\r\n            rootGeomVertices[triIndex2 * vertStride + 1],\r\n            rootGeomVertices[triIndex2 * vertStride + 2]\r\n        );\r\n\r\n        // Random barycentric coordinates\r\n        let baryU = Math.random();\r\n        let baryV = Math.random();\r\n        if(baryU + baryV > 1.0)\r\n        {\r\n            baryU = 1.0 - baryU;\r\n            baryV = 1.0 - baryV;\r\n        }\r\n\r\n        /*const randPos = vertPos0 + \r\n            (vertPos1 - vertPos0) * baryU + \r\n            (vertPos2 - vertPos0) * baryV*/\r\n        let randPos = vertPos0;\r\n        let side0 = vec3.fromValues(0,0,0);\r\n        let side1 = vec3.fromValues(0,0,0);\r\n        vec3.subtract(side0, vertPos1, vertPos0);\r\n        vec3.subtract(side1, vertPos2, vertPos0);\r\n        vec3.scaleAndAdd(randPos, randPos, side0, baryU);\r\n        vec3.scaleAndAdd(randPos, randPos, side1, baryV);\r\n\r\n        // Apply position\r\n        rootPositions[i * 4 + 0] = randPos[0];\r\n        rootPositions[i * 4 + 1] = randPos[1] + 0.1;\r\n        rootPositions[i * 4 + 2] = randPos[2];\r\n        rootPositions[i * 4 + 3] = 0.0;\r\n\r\n        /*rootPositions[i * 4 + 0] = 0.0;\r\n        rootPositions[i * 4 + 1] = 0.0;\r\n        rootPositions[i * 4 + 2] = -(i - 0.5) * 2.0;\r\n        rootPositions[i * 4 + 3] = 0.0;*/\r\n    }\r\n\r\n    // Initial hair point positions\r\n    for(let i = 0; i < numAllHairPoints; i++)\r\n    {\r\n        hairPointPositions[i * 4 + 0] = 0.0;\r\n        hairPointPositions[i * 4 + 1] = 0.0;\r\n        hairPointPositions[i * 4 + 2] = i < numHairPoints ? 1 + i : -1 - (i - numHairPoints);\r\n        hairPointPositions[i * 4 + 3] = 0.0;\r\n    }\r\n\r\n    return {\r\n        rootPositions,\r\n        hairPointPositions\r\n    };\r\n}","import * as WGPU from './helper';\r\nimport * as Shaders from './shaders';\r\nimport { vec3, mat4, vec4 } from 'gl-matrix';\r\nimport { createSphereData, createHairStrandData } from './vertex_data';\r\nimport { loadOBJ } from './objLoader';\r\n\r\nexport const hairSim = async () =>\r\n{\r\n    const gpu = await WGPU.initGPU();\r\n    const device = gpu.device;\r\n    \r\n    // Model data buffers\r\n    const modelData = await loadOBJ('res/gfx/suzanne.obj');\r\n    //const modelData = await loadOBJ('res/gfx/suzanneHairRoot.obj');\r\n    const modelHairRootGeometryData = await loadOBJ('res/gfx/suzanneHairRoot.obj');\r\n    const modelNumIndices = modelData?.indexData.length!;\r\n    const modelVertexBuffer = WGPU.createGPUBuffer(device, modelData?.vertexData!);\r\n    const modelIndexBuffer = WGPU.createGPUBufferUint(device, modelData?.indexData!);\r\n \r\n\r\n    // Hair strand data buffers\r\n    const numHairPoints: number = 4;\r\n    const numHairStrands: number = 200;\r\n    const hairStrandLength: number = 4.0;\r\n    const hairStrandWidth: number = 0.2;\r\n    const hairStrandData = createHairStrandData(\r\n        modelHairRootGeometryData, numHairPoints, numHairStrands\r\n    );\r\n    const hairStrandNumIndices = hairStrandData?.indexData.length!;\r\n    const hairStrandIndexBuffer = WGPU.createGPUBufferUint(device, hairStrandData?.indexData);\r\n\r\n    // Collision spheres\r\n    // xyz: position, w: radius\r\n    let collisionSpheres = [] as any;\r\n    collisionSpheres.push([0, 0, 0, 1]);\r\n    collisionSpheres.push([1, 0.1, -0.3, 0.4]);\r\n    collisionSpheres.push([-1, 0.1, -0.3, 0.4]);\r\n\r\n    // Sphere buffers\r\n    let allSpheresNumIndices = [] as number[];\r\n    let allSpheresVertexBuffers = [] as GPUBuffer[];\r\n    let allSpheresIndexBuffers = [] as GPUBuffer[];\r\n    for(let i = 0; i < collisionSpheres.length; i++)\r\n    {\r\n        const sphereModelData = createSphereData(collisionSpheres[i][3], 10, 10, [collisionSpheres[i][0], collisionSpheres[i][1], collisionSpheres[i][2]]);\r\n        const sphereModelNumIndices = sphereModelData?.indexData.length!;\r\n        const sphereModelVertexBuffer = WGPU.createGPUBuffer(device, sphereModelData?.vertexData!);\r\n        const sphereModelIndexBuffer = WGPU.createGPUBufferUint(device, sphereModelData?.indexData!);\r\n\r\n        // Add to arrays\r\n        allSpheresNumIndices.push(sphereModelNumIndices);\r\n        allSpheresVertexBuffers.push(sphereModelVertexBuffer);\r\n        allSpheresIndexBuffers.push(sphereModelIndexBuffer);\r\n    }\r\n\r\n    // Render pipelines and compute pipeline\r\n    const defaultShaders = Shaders.getModelShaders();\r\n    const redShaders = Shaders.getRedShaders();\r\n    const modelPipeline = WGPU.createModelRenderPipeline(device, gpu.format, defaultShaders.vertexShader, defaultShaders.fragmentShader);\r\n    const collisionModelPipeline = WGPU.createModelRenderPipeline(device, gpu.format, redShaders.vertexShader, redShaders.fragmentShader);\r\n    const hairPipeline = WGPU.createHairRenderPipeline(device, gpu.format);\r\n    const computeUpdateHairPipeline = WGPU.createComputeUpdateHairPipeline(device);\r\n    const computeApplyHairPipeline = WGPU.createComputeApplyHairPipeline(device);\r\n\r\n    // Hair\r\n    const numAllHairPoints = numHairPoints * numHairStrands;\r\n    const initialHairPointRootPosData = hairStrandData.rootPositions;\r\n    const initialHairPointData = hairStrandData.hairPointPositions;\r\n    const initialHairPointAccelData = new Float32Array(numAllHairPoints * 4);\r\n    const initialHairPointVertexData = new Float32Array(numAllHairPoints * 4 * 2);\r\n    const localCollisionSpheres = new Float32Array(collisionSpheres.flat());\r\n\r\n    // Just init the point vertex positions to 0, since\r\n    // these will be updated dynamically\r\n    for(let i = 0; i < numAllHairPoints * 4 * 2; i++)\r\n    {\r\n        initialHairPointVertexData[i] = 0.0;\r\n    }\r\n\r\n    // Init gravity\r\n    for(let i = 0; i < numAllHairPoints; i++)\r\n    {\r\n        initialHairPointAccelData[i * 4 + 0] = 0.0;\r\n        initialHairPointAccelData[i * 4 + 1] = -40.0;\r\n        initialHairPointAccelData[i * 4 + 2] = 0.0;\r\n        initialHairPointAccelData[i * 4 + 3] = 0.0;\r\n    }\r\n\r\n    // Hair point position buffers\r\n    const hairPointBuffer = WGPU.createGPUBuffer(\r\n        device, \r\n        initialHairPointData, \r\n        GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\r\n    );\r\n    const hairPointTempWriteBuffer = WGPU.createGPUBuffer(\r\n        device, \r\n        initialHairPointData, \r\n        GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\r\n    );\r\n\r\n    // Previous hair point position buffer\r\n    const hairPointPrevBuffer = WGPU.createGPUBuffer(\r\n        device, \r\n        initialHairPointData, \r\n        GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\r\n    );\r\n\r\n    // Hair point root position buffer\r\n    const hairPointRootBuffer = WGPU.createGPUBuffer(\r\n        device,\r\n        initialHairPointRootPosData,\r\n        GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\r\n    );\r\n\r\n    // Hair point acceleration buffer\r\n    const hairPointAccelBuffer = WGPU.createGPUBuffer(\r\n        device, \r\n        initialHairPointAccelData, \r\n        GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\r\n    );\r\n\r\n    // Hair point to vertex data buffer\r\n    const hairPointVertexDataBuffer = WGPU.createGPUBuffer(\r\n        device, \r\n        initialHairPointVertexData, \r\n        GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\r\n    );\r\n\r\n    // Collision spheres data buffer\r\n    const collisionSpheresBuffer = WGPU.createGPUBuffer(\r\n        device,\r\n        localCollisionSpheres,\r\n        GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\r\n    );\r\n\r\n    // Create uniform data\r\n    const normalMatrix = mat4.create();\r\n    const modelMatrix = mat4.create();\r\n    let vMatrix = mat4.create();\r\n    let vpMatrix = mat4.create();\r\n    const vp = WGPU.createViewProjection(gpu.canvas.width/gpu.canvas.height);\r\n    vpMatrix = vp.viewProjectionMatrix;\r\n\r\n    // Hair uniform data\r\n    const HairParams = \r\n    {\r\n        deltaTime: 0.007,\r\n        maxHairPointDist: hairStrandLength / numHairPoints,\r\n        numberOfHairPoints: numHairPoints,\r\n    };\r\n    const ApplyHairParams = \r\n    {\r\n        halfHairWidth: hairStrandWidth*0.5\r\n    };\r\n\r\n    // Add rotation and camera\r\n    let rotation = vec3.fromValues(0, 0, 0);       \r\n    let eyePosition = new Float32Array(vp.cameraPosition);\r\n    let lightPosition = eyePosition;\r\n\r\n    // Create uniform buffer and layout\r\n    const vertexUniformBuffer = device.createBuffer(\r\n    {\r\n        size: 192,\r\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n    });\r\n    const fragmentUniformBuffer = device.createBuffer(\r\n    {\r\n        size: 32,\r\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n    });\r\n\r\n    // For update hair shader\r\n    const computeUniformBufferSize: number = Object.keys(HairParams).length * 4;\r\n    const computeUniformBuffer = device.createBuffer(\r\n    {\r\n        size: computeUniformBufferSize,\r\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n    });\r\n    const computeUniformMatrixBufferSize: number = 1 * 4 * 4 * 4;\r\n    const computeUniformMatrixBuffer = device.createBuffer(\r\n    {\r\n        size: computeUniformMatrixBufferSize,\r\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n    });\r\n\r\n    // For apply hair\r\n    const applyHairUniformBufferSize: number = Object.keys(ApplyHairParams).length * 4;\r\n    const applyHairUniformBuffer = device.createBuffer(\r\n    {\r\n        size: applyHairUniformBufferSize,\r\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n    });\r\n\r\n    // Write to uniforms\r\n    device.queue.writeBuffer(vertexUniformBuffer, 0, vp.viewProjectionMatrix as ArrayBuffer);\r\n    device.queue.writeBuffer(fragmentUniformBuffer, 0, lightPosition);\r\n    device.queue.writeBuffer(fragmentUniformBuffer, 16, eyePosition);\r\n    device.queue.writeBuffer(\r\n        computeUniformBuffer, \r\n        0, \r\n        new Float32Array(\r\n        [\r\n            HairParams.deltaTime, \r\n            HairParams.maxHairPointDist,\r\n            HairParams.numberOfHairPoints\r\n        ])\r\n    );\r\n    device.queue.writeBuffer(\r\n        applyHairUniformBuffer,\r\n        0,\r\n        new Float32Array(\r\n        [\r\n            ApplyHairParams.halfHairWidth\r\n        ])\r\n    );\r\n\r\n    // Uniform bind groups for uniforms in render pipeline and buffer\r\n    // in compute pipeline\r\n    const modelBindGroup = WGPU.createBindGroup(\r\n        device, \r\n        modelPipeline, \r\n        vertexUniformBuffer, \r\n        fragmentUniformBuffer\r\n    );\r\n    const collisionModelBindGroup = WGPU.createBindGroup(\r\n        device, \r\n        collisionModelPipeline, \r\n        vertexUniformBuffer, \r\n        fragmentUniformBuffer\r\n    );\r\n    const hairBindGroup = WGPU.createBindGroup(\r\n        device,\r\n        hairPipeline,\r\n        vertexUniformBuffer, \r\n        fragmentUniformBuffer\r\n    );\r\n    const computeUpdateHairBindGroup = WGPU.createComputeUpdateHairBindGroup(\r\n        device,\r\n        computeUpdateHairPipeline,\r\n        hairPointBuffer,\r\n        hairPointTempWriteBuffer,\r\n        hairPointPrevBuffer,\r\n        hairPointRootBuffer,\r\n        hairPointAccelBuffer,\r\n        collisionSpheresBuffer,\r\n        computeUniformBuffer,\r\n        computeUniformMatrixBuffer,\r\n        initialHairPointData.byteLength,\r\n        initialHairPointRootPosData.byteLength,\r\n        localCollisionSpheres.byteLength,\r\n        computeUniformBufferSize,\r\n        computeUniformMatrixBufferSize\r\n    );\r\n    const computeApplyHairBindGroup = WGPU.createComputeApplyHairBindGroup(\r\n        device,\r\n        computeApplyHairPipeline,\r\n        hairPointBuffer,\r\n        hairPointTempWriteBuffer,\r\n        hairPointPrevBuffer,\r\n        hairPointVertexDataBuffer,\r\n        applyHairUniformBuffer,\r\n        initialHairPointData.byteLength,\r\n        initialHairPointVertexData.byteLength,\r\n        applyHairUniformBufferSize\r\n    );\r\n\r\n    // Color and depth textures\r\n    let textureView = gpu.context.getCurrentTexture().createView();\r\n    const depthTexture = device.createTexture({\r\n        size: [gpu.canvas.width, gpu.canvas.height, 1],\r\n        format: \"depth24plus\",\r\n        usage: GPUTextureUsage.RENDER_ATTACHMENT\r\n    });\r\n\r\n    // Color and depth/stencil attachments\r\n    const renderPassDescription = WGPU.createRenderPassDesc(\r\n        textureView, \r\n        depthTexture.createView()\r\n    );\r\n    \r\n    function draw() \r\n    {\r\n        // Update model matrix and normal matrix\r\n        let translation: vec3 = vec3.fromValues(\r\n            0, \r\n            0, \r\n            Math.sin(rotation[1]) * 2.0\r\n        );\r\n        WGPU.createTransforms(modelMatrix, translation, rotation);\r\n        mat4.invert(normalMatrix, modelMatrix);\r\n        mat4.transpose(normalMatrix, normalMatrix);\r\n        device.queue.writeBuffer(vertexUniformBuffer, 64, modelMatrix as ArrayBuffer);\r\n        device.queue.writeBuffer(vertexUniformBuffer, 128, normalMatrix as ArrayBuffer);\r\n\r\n        // Update uniforms for compute buffer\r\n        device.queue.writeBuffer(computeUniformMatrixBuffer, 0, modelMatrix as ArrayBuffer);\r\n\r\n        // Recreate color attachment\r\n        textureView = gpu.context.getCurrentTexture().createView();\r\n        renderPassDescription.colorAttachments[0].view = textureView;\r\n\r\n        // Start passes\r\n        const commandEncoder = device.createCommandEncoder();\r\n\r\n        // Compute pass\r\n        {\r\n            const passEncoder = commandEncoder.beginComputePass();\r\n\r\n            // Hair physics\r\n            passEncoder.setPipeline(computeUpdateHairPipeline);\r\n            passEncoder.setBindGroup(0, computeUpdateHairBindGroup);\r\n            passEncoder.dispatch(numAllHairPoints);\r\n\r\n            // Apply changes\r\n            passEncoder.setPipeline(computeApplyHairPipeline);\r\n            passEncoder.setBindGroup(0, computeApplyHairBindGroup);\r\n            passEncoder.dispatch(numAllHairPoints);\r\n\r\n            passEncoder.endPass();\r\n        }\r\n        \r\n        // Draw pass\r\n        {\r\n            const passEncoder = commandEncoder.beginRenderPass(renderPassDescription as GPURenderPassDescriptor);\r\n\r\n            // Model\r\n            passEncoder.setPipeline(modelPipeline);\r\n            passEncoder.setBindGroup(0, modelBindGroup);       \r\n            passEncoder.setVertexBuffer(0, modelVertexBuffer);\r\n            passEncoder.setIndexBuffer(modelIndexBuffer, \"uint32\");\r\n            passEncoder.drawIndexed(modelNumIndices);\r\n\r\n            // Collision spheres\r\n            passEncoder.setPipeline(collisionModelPipeline);\r\n            passEncoder.setBindGroup(0, collisionModelBindGroup);\r\n            for(let i = 0; i < collisionSpheres.length; i++)\r\n            {\r\n                passEncoder.setVertexBuffer(0, allSpheresVertexBuffers[i]);\r\n                passEncoder.setIndexBuffer(allSpheresIndexBuffers[i], \"uint32\");\r\n                passEncoder.drawIndexed(allSpheresNumIndices[i]);\r\n            }\r\n\r\n\r\n            // Hair\r\n            passEncoder.setPipeline(hairPipeline);\r\n            passEncoder.setBindGroup(0, hairBindGroup);    \r\n            passEncoder.setVertexBuffer(0, hairPointVertexDataBuffer);\r\n            passEncoder.setIndexBuffer(hairStrandIndexBuffer, \"uint32\");\r\n            passEncoder.drawIndexed(hairStrandNumIndices);\r\n\r\n\r\n            // End of pass\r\n            passEncoder.endPass();\r\n        }\r\n\r\n        // Submit passes\r\n        device.queue.submit([commandEncoder.finish()]);\r\n    }\r\n\r\n    // Make draw() loop\r\n    WGPU.createAnimation(draw, rotation);\r\n}","import * as Shaders from './shaders';\r\nimport { vec3, mat4 } from 'gl-matrix';\r\nimport { AnyMxRecord } from 'dns';\r\n\r\nexport const createAnimation = (draw: any, \r\n    rotation: vec3 = vec3.fromValues(0,0,0)) =>\r\n{\r\n    function step()\r\n    {\r\n        // Update rotation\r\n        rotation[1] += 0.01;\r\n\r\n        draw();\r\n        requestAnimationFrame(step);\r\n    }\r\n    requestAnimationFrame(step);\r\n}\r\n\r\nexport const createTransforms = (\r\n    modelMat: mat4, translation: vec3 = [0, 0, 0],\r\n    rotation: vec3 = [0, 0, 0], scaling: vec3 = [1, 1, 1]) =>\r\n{\r\n    const rotateXMat = mat4.create();\r\n    const rotateYMat = mat4.create();\r\n    const rotateZMat = mat4.create();\r\n    const translateMat = mat4.create();\r\n    const scaleMat = mat4.create();\r\n\r\n    // Perform individual transformations\r\n    mat4.fromTranslation(translateMat, translation);\r\n    mat4.fromXRotation(rotateXMat, rotation[0]);\r\n    mat4.fromYRotation(rotateYMat, rotation[1]);\r\n    mat4.fromZRotation(rotateZMat, rotation[2]);\r\n    mat4.fromScaling(scaleMat, scaling);\r\n\r\n    // Combine all transformation matrices together to form a final\r\n    // transformation matrix: the model matrix\r\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\r\n    mat4.multiply(modelMat, rotateYMat, modelMat);\r\n    mat4.multiply(modelMat, rotateZMat, modelMat);\r\n    mat4.multiply(modelMat, translateMat, modelMat);\r\n}\r\n\r\nexport const createViewProjection = (aspectRatio = 1.0, \r\n    cameraPosition: vec3 = [2, 2, 4], lookDirection: vec3 = [0, 0, 0],\r\n    upDirection: vec3 = [0, 1, 0]) =>\r\n{\r\n    const viewMatrix = mat4.create();\r\n    const projectionMatrix = mat4.create();\r\n    const viewProjectionMatrix = mat4.create();\r\n\r\n    mat4.perspective(projectionMatrix, 2*Math.PI/5, aspectRatio, 0.1, 100.0);\r\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\r\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\r\n\r\n    return { \r\n        viewMatrix, \r\n        projectionMatrix, \r\n        viewProjectionMatrix, \r\n        cameraPosition\r\n    };\r\n}\r\n\r\nexport const createRenderPassDesc = (\r\n    textureView: GPUTextureView, depthTextureView: GPUTextureView) =>\r\n{\r\n    const renderPassDescription = \r\n    {\r\n        colorAttachments: [\r\n        {\r\n            view: textureView,\r\n            loadValue: { r: 0.2, g: 0.2, b: 0.2, a: 1.0 }, //background color\r\n            storeOp: 'store'\r\n        }],\r\n        depthStencilAttachment: \r\n        {\r\n            view: depthTextureView,\r\n            depthLoadValue: 1.0,\r\n            depthStoreOp: \"store\",\r\n            stencilLoadValue: 0,\r\n            stencilStoreOp: \"store\"\r\n        }\r\n    };\r\n\r\n    return renderPassDescription;\r\n}\r\n\r\nexport const createModelRenderPipeline = (\r\n    device: GPUDevice,\r\n    gpuFormat: GPUTextureFormat,\r\n    vertexShader: any,\r\n    fragmentShader: any) =>\r\n{\r\n    // Vertex buffer is a single buffer\r\n    const pipeline = device.createRenderPipeline(\r\n    {\r\n        vertex: \r\n        {\r\n            module: device.createShaderModule(\r\n            {                    \r\n                code: vertexShader\r\n            }),\r\n            entryPoint: \"main\",\r\n            buffers:[\r\n            {\r\n                arrayStride: 4*(3+3),\r\n                attributes: [\r\n                {\r\n                    shaderLocation: 0,\r\n                    format: \"float32x3\",\r\n                    offset: 0\r\n                },\r\n                {\r\n                    shaderLocation: 1,\r\n                    format: \"float32x3\",\r\n                    offset: 4*3\r\n                }]\r\n            }]\r\n        },\r\n        fragment: \r\n        {\r\n            module: device.createShaderModule(\r\n            {\r\n                code: fragmentShader\r\n            }),\r\n            entryPoint: \"main\",\r\n            targets: [\r\n            {\r\n                format: gpuFormat\r\n            }]\r\n        },\r\n        primitive: \r\n        {\r\n            topology: \"triangle-list\",\r\n            cullMode: \"back\"\r\n        },\r\n        depthStencil: \r\n        {\r\n            format: \"depth24plus\",\r\n            depthWriteEnabled: true,\r\n            depthCompare: \"less\"\r\n        }\r\n    });\r\n\r\n    return pipeline;\r\n}\r\n\r\nexport const createHairRenderPipeline = (device: GPUDevice,\r\n    gpuFormat: GPUTextureFormat) =>\r\n{\r\n    const shader = Shaders.getHairShaders();\r\n\r\n    const pipeline = device.createRenderPipeline(\r\n    {\r\n        vertex: \r\n        {\r\n            module: device.createShaderModule(\r\n            {\r\n                code: shader.vertexShader\r\n            }),\r\n            entryPoint: \"main\",\r\n            buffers: [\r\n                // Hair points, vec4 for read coherency\r\n                {\r\n                    arrayStride: 4*(4),\r\n                    attributes: [\r\n                    {\r\n                        shaderLocation: 0,\r\n                        format: \"float32x4\",\r\n                        offset: 0\r\n                    }]\r\n                },\r\n            ]\r\n        },\r\n        fragment: {\r\n            module: device.createShaderModule(\r\n            { \r\n                code: shader.fragmentShader\r\n            }),\r\n            entryPoint: \"main\",\r\n            targets: [\r\n            {\r\n                format: gpuFormat\r\n            }]\r\n        },\r\n        primitive: \r\n        {\r\n            topology: \"triangle-list\",\r\n            cullMode: \"none\"\r\n        },\r\n        depthStencil: \r\n        {\r\n            format: \"depth24plus\",\r\n            depthWriteEnabled: true,\r\n            depthCompare: \"less\"\r\n        }\r\n    });\r\n\r\n    return pipeline;\r\n}\r\n\r\nexport const createComputePipeline = (device: GPUDevice, shader: any) =>\r\n{\r\n    const computePipeline = device.createComputePipeline(\r\n    {\r\n        compute: \r\n        {\r\n            module: device.createShaderModule(\r\n            {\r\n                code: shader\r\n            }),\r\n            entryPoint: 'main'\r\n        }\r\n    });\r\n\r\n    return computePipeline;\r\n}\r\n\r\nexport const createComputeUpdateHairPipeline = (device: GPUDevice) =>\r\n{\r\n    return createComputePipeline(device, Shaders.getUpdateHairComputeShader());\r\n}\r\n\r\nexport const createComputeApplyHairPipeline = (device: GPUDevice) =>\r\n{\r\n    return createComputePipeline(device, Shaders.getApplyHairComputeShader());\r\n}\r\n\r\nexport const createBindGroup = (device: GPUDevice, pipeline: GPURenderPipeline,\r\n    vertexUniformBuffer: GPUBuffer, fragmentUniformBuffer: GPUBuffer) =>\r\n{\r\n    const uniformBindGroup = device.createBindGroup(\r\n    {\r\n        layout: pipeline.getBindGroupLayout(0),\r\n        entries: [\r\n        {\r\n            binding: 0,\r\n            resource: \r\n            {\r\n                buffer: vertexUniformBuffer,\r\n                size: 64*3,\r\n                offset: 0,\r\n            }\r\n        },\r\n        {\r\n            binding: 1,\r\n            resource: \r\n            {\r\n                buffer: fragmentUniformBuffer,\r\n                size: 16*2,\r\n                offset: 0,\r\n            }\r\n        }]\r\n    });\r\n\r\n    return uniformBindGroup;\r\n}\r\n\r\nexport const createComputeUpdateHairBindGroup = (\r\n    device: GPUDevice, \r\n    computePipeline: GPUComputePipeline, \r\n    hairPointBuffer: GPUBuffer, \r\n    hairPointTempWriteBuffer: GPUBuffer, \r\n    hairPointPrevBuffer: GPUBuffer,\r\n    hairPointRootBuffer: GPUBuffer,\r\n    hairPointAccelBuffer: GPUBuffer,\r\n    collisionSpheresBuffer: GPUBuffer,\r\n    computeUniformBuffer: GPUBuffer, \r\n    computeMatrixBuffer: GPUBuffer,\r\n    byteLength: number, \r\n    rootByteLength: number,\r\n    collisionSphereByteLength: number,\r\n    uniformBufferByteLength: number,\r\n    uniformMatrixBufferByteLength: number) =>\r\n{\r\n    const createdBindGroup = device.createBindGroup(\r\n    {\r\n        layout: computePipeline.getBindGroupLayout(0),\r\n        entries: [\r\n        {\r\n            binding: 0,\r\n            resource: \r\n            {\r\n                buffer: hairPointBuffer,\r\n                size: byteLength,\r\n                offset: 0,\r\n            },\r\n        },\r\n        {\r\n            binding: 1,\r\n            resource: \r\n            {\r\n                buffer: hairPointTempWriteBuffer,\r\n                size: byteLength,\r\n                offset: 0,\r\n            },\r\n        },\r\n        {\r\n            binding: 2,\r\n            resource:\r\n            {\r\n                buffer: hairPointPrevBuffer,\r\n                size: byteLength,\r\n                offset: 0,\r\n            }\r\n        },\r\n        {\r\n            binding: 3,\r\n            resource:\r\n            {\r\n                buffer: hairPointRootBuffer,\r\n                size: rootByteLength,\r\n                offset: 0,\r\n            }\r\n        },\r\n        {\r\n            binding: 4,\r\n            resource:\r\n            {\r\n                buffer: hairPointAccelBuffer,\r\n                size: byteLength,\r\n                offset: 0,\r\n            }\r\n        },\r\n        {\r\n            binding: 5,\r\n            resource:\r\n            {\r\n                buffer: collisionSpheresBuffer,\r\n                size: collisionSphereByteLength,\r\n                offset: 0,\r\n            }\r\n        },\r\n        {\r\n            binding: 6,\r\n            resource: \r\n            {\r\n                buffer: computeUniformBuffer,\r\n                size: uniformBufferByteLength,\r\n                offset: 0,\r\n            },\r\n        },\r\n        {\r\n            binding: 7,\r\n            resource:\r\n            {\r\n                buffer: computeMatrixBuffer,\r\n                size: uniformMatrixBufferByteLength,\r\n                offset: 0,\r\n            }\r\n        }],\r\n    });\r\n\r\n    return createdBindGroup;\r\n}\r\n\r\nexport const createComputeApplyHairBindGroup = (device: GPUDevice, \r\n    computePipeline: GPUComputePipeline, hairPointBuffer: GPUBuffer,\r\n    hairPointTempWriteBuffer: GPUBuffer, \r\n    hairPointPrevBuffer: GPUBuffer,\r\n    hairPointVertexDataBuffer: GPUBuffer,\r\n    applyHairUniformBuffer: GPUBuffer,\r\n    byteLength: number, \r\n    vertexDataByteLength: number,\r\n    applyHairUniformBufferByteLength: number) =>\r\n{\r\n    const createdBindGroup = device.createBindGroup(\r\n    {\r\n        layout: computePipeline.getBindGroupLayout(0),\r\n        entries: [\r\n        {\r\n            binding: 0,\r\n            resource: \r\n            {\r\n                buffer: hairPointBuffer,\r\n                size: byteLength,\r\n                offset: 0,\r\n            },\r\n        },\r\n        {\r\n            binding: 1,\r\n            resource: \r\n            {\r\n                buffer: hairPointTempWriteBuffer,\r\n                size: byteLength,\r\n                offset: 0,\r\n            },\r\n        },\r\n        {\r\n            binding: 2,\r\n            resource:\r\n            {\r\n                buffer: hairPointPrevBuffer,\r\n                size: byteLength,\r\n                offset: 0,\r\n            }\r\n        },\r\n        {\r\n            binding: 3,\r\n            resource: \r\n            {\r\n                buffer: hairPointVertexDataBuffer,\r\n                size: vertexDataByteLength,\r\n                offset: 0,\r\n            },\r\n        },\r\n        {\r\n            binding: 4,\r\n            resource:\r\n            {\r\n                buffer: applyHairUniformBuffer,\r\n                size: applyHairUniformBufferByteLength,\r\n                offset: 0,\r\n            }\r\n        }],\r\n    });\r\n\r\n    return createdBindGroup;\r\n}\r\n\r\nexport const createGPUBufferUint = (device: GPUDevice, data: Uint32Array,\r\n    usageFlag: GPUBufferUsageFlags = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST) =>\r\n{\r\n    // Created mapped buffer\r\n    const buffer = device.createBuffer(\r\n    {\r\n        size: data.byteLength,\r\n        usage: usageFlag,\r\n        mappedAtCreation: true\r\n    });\r\n\r\n    // Set buffer data \r\n    new Uint32Array(buffer.getMappedRange()).set(data);\r\n\r\n    // Unmap\r\n    buffer.unmap();\r\n\r\n    return buffer;\r\n}\r\n\r\nexport const createGPUBuffer = (device: GPUDevice, data: Float32Array,\r\n    usageFlag: GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => \r\n{\r\n    // Create mapped buffer\r\n    const buffer = device.createBuffer(\r\n    {\r\n        size: data.byteLength,\r\n        usage: usageFlag,\r\n        mappedAtCreation: true\r\n    });\r\n\r\n    // Set buffer data\r\n    new Float32Array(buffer.getMappedRange()).set(data);\r\n\r\n    // Unmap\r\n    buffer.unmap();\r\n\r\n    return buffer;\r\n}\r\n\r\nexport const initGPU = async () => {\r\n    const checkgpu = checkWebGPU();\r\n    if(checkgpu.includes('Your current browser does not support WebGPU!'))\r\n    {\r\n        console.log(checkgpu);\r\n        throw('Your current browser does not support WebGPU');\r\n    }\r\n\r\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter() as GPUAdapter;\r\n    const device = await adapter?.requestDevice() as GPUDevice;\r\n    const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;\r\n\r\n    const devicePixelRatio = window.devicePixelRatio || 1;\r\n    const size = [\r\n        canvas.clientWidth * devicePixelRatio,\r\n        canvas.clientHeight * devicePixelRatio\r\n    ];\r\n    const format = context.getPreferredFormat(adapter!);\r\n    \r\n    context.configure(\r\n    {\r\n        device: device,\r\n        format: format,\r\n        size: size\r\n    });\r\n\r\n    return { \r\n        device, \r\n        canvas, \r\n        format, \r\n        context \r\n    };\r\n}\r\n\r\nexport const checkWebGPU = () => {\r\n    let result = 'Great, your current browser supports WebGPU!';\r\n\r\n    // WebGPU is not supported\r\n    if(!navigator.gpu) \r\n    {\r\n        result = `Your current browser does not support WebGPU! \r\n        Make sure you are on a system with WebGPU enabled. Currently,\r\n        SPIR-WebGPU is only supported in <a href=\"https://www.google.com/chrome/canary\">Chrome canary</a>\r\n        with the flag \"enable-unsafe-webgpu\" enabled. See the\r\n        <a href=\"https://github.com/gpuweb/gpuweb/wiki/Implementation-Status\">\r\n        Implementation Status</a> page for more details.`;\r\n    }\r\n\r\n    return result;\r\n}","export const loadOBJ = async (filePath: string) =>\r\n{\r\n    // Read file\r\n    const response = await fetch(filePath)\r\n    .then(response => response.text())\r\n    .then(fileContents => \r\n    {\r\n        let positions = [] as any;\r\n        let normals = [] as any;\r\n\r\n        let vertices = [] as any;\r\n        let indices = [] as any;\r\n        let currentIndex: number = 0;\r\n\r\n        let fileString = fileContents.split(\"\\n\");\r\n\r\n        // Loop through each line\r\n        for(let i = 0; i < fileString.length; i++)\r\n        {\r\n            // Split lines\r\n            let lineString = fileString[i].split(\" \");\r\n\r\n            // Vertex positions\r\n            if(lineString[0] == \"v\")\r\n            {\r\n                positions.push(\r\n                [\r\n                    parseFloat(lineString[1]), \r\n                    parseFloat(lineString[2]), \r\n                    parseFloat(lineString[3])\r\n                ]);\r\n            }\r\n            // Normals\r\n            else if(lineString[0] == \"vn\")\r\n            {\r\n                normals.push(\r\n                [\r\n                    parseFloat(lineString[1]),\r\n                    parseFloat(lineString[2]),\r\n                    parseFloat(lineString[3]),\r\n                ]);\r\n            }\r\n            // Face\r\n            else if(lineString[0] == \"f\")\r\n            {\r\n                // Go through each vertex\r\n                for(let j = 1; j < lineString.length; j++)\r\n                {\r\n                    let wordString = lineString[j].split(\"/\");\r\n\r\n                    // Vertex data\r\n                    vertices.push(positions[parseFloat(wordString[0]) - 1]);\r\n                    vertices.push(normals[parseFloat(wordString[2]) - 1]);\r\n\r\n                    // Re-add indices for Quads\r\n                    if(j >= 4)\r\n                    {\r\n                        let firstIndex = indices[indices.length - 3];\r\n                        let thirdIndex = indices[indices.length - 1];\r\n\r\n                        indices.push(firstIndex);\r\n                        indices.push(thirdIndex);\r\n                    }\r\n\r\n                    // Next index\r\n                    indices.push(currentIndex);\r\n                    currentIndex++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create usable arrays\r\n        const vertexData = new Float32Array(vertices.flat());\r\n        const indexData = new Uint32Array(indices.flat());\r\n    \r\n        return {\r\n            vertexData,\r\n            indexData\r\n        };\r\n    });\r\n\r\n    return response;\r\n}","\r\nimport modelVertexShader from './shaderFiles/model.vert.wgsl';\r\nimport modelFragmentShader from './shaderFiles/model.frag.wgsl';\r\nimport redFragmentShader from './shaderFiles/red.frag.wgsl';\r\n\r\nimport hairVertexShader from './shaderFiles/hair.vert.wgsl';\r\nimport hairFragmentShader from './shaderFiles/hair.frag.wgsl';\r\n\r\nimport updateHairShader from './shaderFiles/updateHair.comp.wgsl';\r\nimport applyHairShader from './shaderFiles/applyHair.comp.wgsl';\r\n\r\nexport const getModelShaders = () => \r\n{\r\n    const vertexShader = modelVertexShader;\r\n    const fragmentShader = modelFragmentShader;\r\n\r\n    return { \r\n        vertexShader,\r\n        fragmentShader \r\n    };\r\n}\r\n\r\nexport const getRedShaders = () => \r\n{\r\n    const vertexShader = modelVertexShader;\r\n    const fragmentShader = redFragmentShader;\r\n\r\n    return { \r\n        vertexShader,\r\n        fragmentShader \r\n    };\r\n}\r\n\r\nexport const getHairShaders = () =>\r\n{\r\n    const vertexShader = hairVertexShader;\r\n    const fragmentShader = hairFragmentShader;\r\n\r\n    return { \r\n        vertexShader,\r\n        fragmentShader \r\n    };\r\n}\r\n\r\nexport const getUpdateHairComputeShader = () =>\r\n{\r\n    return updateHairShader;\r\n}\r\n\r\nexport const getApplyHairComputeShader = () =>\r\n{\r\n    return applyHairShader;\r\n}","import { vec3 } from 'gl-matrix';\r\n\r\nexport const getSpherePosition = (radius:number, theta:number, \r\n    phi:number, center:vec3 = [0,0,0]) =>\r\n{\r\n    const snt = Math.sin(theta * Math.PI / 180);\r\n    const cnt = Math.cos(theta * Math.PI / 180);\r\n    const snp = Math.sin(phi * Math.PI / 180);\r\n    const cnp = Math.cos(phi * Math.PI / 180);\r\n\r\n    return [\r\n        radius * snt * cnp + center[0],\r\n        radius * cnt + center[1],\r\n        -radius*snt*snp + center[2]\r\n    ];\r\n}","import { getSpherePosition } from './smath';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { createInitialHairPoints } from './hairHelper';\r\n\r\nexport const createSphereData = (radius:number, u:number, v:number, \r\n    center:vec3 = [0,0,0]) =>\r\n{\r\n    if(u < 2 || v < 2) return;\r\n\r\n    // Create vertices\r\n    let pts = [] as any;\r\n    let pt = [] as any;\r\n    for(let i = 0; i < u; i++)\r\n    {\r\n        let pt1 = [] as any;\r\n\r\n        for(let j = 0; j < v; j++)\r\n        {\r\n            pt = getSpherePosition(\r\n                radius, \r\n                i * 180 / (u-1), \r\n                j * 360 / (v-1), \r\n                center\r\n            );\r\n            pt1.push(pt.flat()); // Position\r\n            pt1.push(pt.flat()); // Normal (not normalized)\r\n        }\r\n\r\n        pts.push(pt1.flat());\r\n    }\r\n\r\n    // Create Indices\r\n    let pi = [] as any;\r\n    for(let i = 0; i < u*v - v - 1; i++)\r\n    {\r\n        pi.push(\r\n            [\r\n                i, \r\n                i + v, \r\n                i + v + 1\r\n            ]\r\n        );\r\n        pi.push(\r\n            [\r\n                i, \r\n                i + v + 1, \r\n                i + 1\r\n            ]\r\n        );\r\n    }\r\n\r\n    const vertexData = new Float32Array(pts.flat());\r\n    const indexData = new Uint32Array(pi.flat());\r\n\r\n    return {\r\n        vertexData,\r\n        indexData\r\n    };\r\n}\r\n\r\nexport const createCubeData = () => \r\n{\r\n    //   <position>   <normal>\r\n    const vertexData = new Float32Array(\r\n    [\r\n        // front     \r\n         1, -1,  1,  0, 0, 1,\r\n        -1, -1,  1,  0, 0, 1,\r\n        -1,  1,  1,  0, 0, 1,\r\n         1,  1,  1,  0, 0, 1,\r\n\r\n        // right\r\n         1, -1, -1,  1, 0, 0,\r\n         1, -1,  1,  1, 0, 0,\r\n         1,  1,  1,  1, 0, 0,\r\n         1,  1, -1,  1, 0, 0,\r\n\r\n        // back\r\n        -1,  1, -1,  0, 0, -1,\r\n        -1, -1, -1,  0, 0, -1,\r\n         1, -1, -1,  0, 0, -1,\r\n         1,  1, -1,  0, 0, -1,\r\n\r\n        // left\r\n        -1,  1,  1,  -1, 0, 0,\r\n        -1, -1,  1,  -1, 0, 0,\r\n        -1, -1, -1,  -1, 0, 0,\r\n        -1,  1, -1,  -1, 0, 0,\r\n\r\n        // top\r\n         1,  1,  1,  0, 1, 0,\r\n        -1,  1,  1,  0, 1, 0,\r\n        -1,  1, -1,  0, 1, 0,\r\n         1,  1, -1,  0, 1, 0,\r\n\r\n        // bottom\r\n        -1, -1, -1,  0, -1, 0,\r\n        -1, -1,  1,  0, -1, 0,\r\n         1, -1,  1,  0, -1, 0,\r\n         1, -1, -1,  0, -1, 0\r\n    ]);\r\n\r\n    const indexData = new Uint32Array(\r\n    [\r\n        // front\r\n        0, 1, 2, 0, 2, 3,\r\n\r\n        // right\r\n        4, 5, 6, 4, 6, 7,\r\n\r\n        // back\r\n        8, 9, 10, 8, 10, 11,\r\n\r\n        // left\r\n        12, 13, 14, 12, 14, 15,\r\n\r\n        // top\r\n        16, 17, 18, 16, 18, 19,\r\n\r\n        // bottom\r\n        20, 21, 22, 20, 22, 23\r\n    ]);\r\n\r\n    return {\r\n        vertexData,\r\n        indexData\r\n    };\r\n};\r\n\r\nexport const createHairStrandData = (\r\n    hairRootGeometryData: any,\r\n    numHairPoints : number, \r\n    numHairStrands : number) =>\r\n{\r\n    // Vertex data is not needed, since it is created and updated dynamically.\r\n    // We only need the index data\r\n    // Create vertices\r\n    /*let verts = [] as any;\r\n    for(let i = 0; i < numHairPoints; i++)\r\n    {\r\n        // Position 1\r\n        verts.push([1, 0, i]);\r\n\r\n        // Normal 1\r\n        verts.push([0, 1, 0]);\r\n\r\n\r\n        // Position 2\r\n        verts.push([-1, 0, i]);\r\n\r\n        // Normal 2\r\n        verts.push([0, 1, 0]);\r\n    }*/\r\n\r\n    // Create indices\r\n    let ind = [] as any;\r\n    for(let j = 0; j < numHairStrands; j++)\r\n    {\r\n        let strandOffset = j * numHairPoints * 2;\r\n\r\n        for(let i = 0; i < numHairPoints - 1; i++)\r\n        {\r\n            // Create quad\r\n            ind.push([\r\n                strandOffset + i*2 + 0, strandOffset + i*2 + 1, strandOffset + i*2 + 2,\r\n                strandOffset + i*2 + 1, strandOffset + i*2 + 3, strandOffset + i*2 + 2\r\n            ]);\r\n        }\r\n    }\r\n\r\n    const indexData = new Uint32Array(ind.flat());\r\n\r\n    // Get initial growth- and hair points\r\n    const initialData = createInitialHairPoints(\r\n        hairRootGeometryData,\r\n        numHairPoints,\r\n        numHairStrands\r\n    );\r\n    const rootPositions = initialData.rootPositions;\r\n    const hairPointPositions = initialData.hairPointPositions;\r\n\r\n    return {\r\n        indexData,\r\n        rootPositions,\r\n        hairPointPositions\r\n    };\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { hairSim } from './hairSimScene';\r\nimport $ from 'jquery';\r\n\r\nhairSim();"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","hypot","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","y","i","arguments","length","sqrt","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","tan","Infinity","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","vec","div","dist","sqrDist","sqrLen","forEach","stride","offset","count","fn","arg","l","dot","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","setAxes","view","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","createHairStrand","startPos","direction","createInitialHairPoints","hairRootGeometryData","numHairPoints","numHairStrands","numAllHairPoints","rootPositions","hairPointPositions","rootGeomVertices","vertexData","rootGeomIndices","indexData","randomIndex","triIndex0","triIndex1","triIndex2","vertPos0","vec3","vertPos1","vertPos2","baryU","baryV","randPos","side0","side1","hairSim","gpu","WGPU","initGPU","device","modelData","loadOBJ","modelHairRootGeometryData","modelNumIndices","modelVertexBuffer","createGPUBuffer","modelIndexBuffer","createGPUBufferUint","hairStrandData","createHairStrandData","hairStrandNumIndices","hairStrandIndexBuffer","collisionSpheres","push","allSpheresNumIndices","allSpheresVertexBuffers","allSpheresIndexBuffers","sphereModelData","createSphereData","sphereModelNumIndices","sphereModelVertexBuffer","sphereModelIndexBuffer","defaultShaders","Shaders","getModelShaders","redShaders","getRedShaders","modelPipeline","createModelRenderPipeline","format","vertexShader","fragmentShader","collisionModelPipeline","hairPipeline","createHairRenderPipeline","computeUpdateHairPipeline","createComputeUpdateHairPipeline","computeApplyHairPipeline","createComputeApplyHairPipeline","initialHairPointRootPosData","initialHairPointData","initialHairPointAccelData","initialHairPointVertexData","localCollisionSpheres","flat","hairPointBuffer","GPUBufferUsage","VERTEX","STORAGE","hairPointTempWriteBuffer","hairPointPrevBuffer","hairPointRootBuffer","hairPointAccelBuffer","hairPointVertexDataBuffer","collisionSpheresBuffer","normalMatrix","mat4","modelMatrix","vpMatrix","vp","createViewProjection","canvas","viewProjectionMatrix","HairParams","deltaTime","maxHairPointDist","hairStrandLength","numberOfHairPoints","ApplyHairParams","halfHairWidth","hairStrandWidth","rotation","eyePosition","cameraPosition","lightPosition","vertexUniformBuffer","createBuffer","size","usage","UNIFORM","COPY_DST","fragmentUniformBuffer","computeUniformBufferSize","Object","keys","computeUniformBuffer","computeUniformMatrixBuffer","applyHairUniformBufferSize","applyHairUniformBuffer","queue","writeBuffer","modelBindGroup","createBindGroup","collisionModelBindGroup","hairBindGroup","computeUpdateHairBindGroup","createComputeUpdateHairBindGroup","byteLength","computeApplyHairBindGroup","createComputeApplyHairBindGroup","textureView","context","getCurrentTexture","createView","depthTexture","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","renderPassDescription","createRenderPassDesc","createAnimation","createTransforms","colorAttachments","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","beginRenderPass","setVertexBuffer","setIndexBuffer","drawIndexed","submit","finish","draw","requestAnimationFrame","step","modelMat","rotateXMat","rotateYMat","rotateZMat","translateMat","scaleMat","aspectRatio","lookDirection","upDirection","viewMatrix","projectionMatrix","depthTextureView","loadValue","g","storeOp","depthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","gpuFormat","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","fragment","targets","primitive","topology","cullMode","depthStencil","depthWriteEnabled","depthCompare","shader","getHairShaders","createComputePipeline","compute","getUpdateHairComputeShader","getApplyHairComputeShader","pipeline","layout","getBindGroupLayout","entries","binding","resource","buffer","computePipeline","computeMatrixBuffer","rootByteLength","collisionSphereByteLength","uniformBufferByteLength","uniformMatrixBufferByteLength","vertexDataByteLength","applyHairUniformBufferByteLength","data","usageFlag","INDEX","mappedAtCreation","Uint32Array","getMappedRange","unmap","checkgpu","checkWebGPU","includes","console","document","getElementById","adapter","navigator","requestAdapter","requestDevice","getContext","devicePixelRatio","window","clientWidth","clientHeight","getPreferredFormat","configure","result","filePath","fetch","then","response","text","fileContents","positions","normals","vertices","indices","currentIndex","fileString","split","lineString","parseFloat","wordString","firstIndex","thirdIndex","getSpherePosition","radius","theta","phi","snt","cnt","snp","pts","pt","pt1","pi","createCubeData","ind","strandOffset","initialData","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","__webpack_modules__","call","definition","key","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value"],"sourceRoot":""}